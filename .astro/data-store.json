[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.3","content-config-digest","ff3a5d1c63ef8579","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://robbiethewagner.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","articles",["Map",11,12,22,23,31,32,40,41,49,50,58,59],"animating-svg-gradients-with-css-custom-properties",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"deferredRender":21},{"title":14,"description":15,"date":16,"author":17},"Animating SVG Gradient Background Colors With CSS Custom Properties","Changing SVG colors is easy right? I certainly thought it should be and in  the past it has not been too difficult, with things like changing the stroke  or fill of the SVG on hover, but what about when we want to hover a solid  colored SVG icon and have it change to a gradient? This proved to be much  more difficult...",["Date","2024-07-08T00:00:00.000Z"],"Robbie Wagner","import { ArticleLayout } from '@/components/ArticleLayout';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## Changing SVG colors is easy right?\n\nI certainly thought it should be and in the past it has not been too difficult,\nwith things like changing the `stroke` or `fill` of the SVG on hover, but what\nabout when we want to hover a solid colored SVG icon and have it change to a\ngradient? This proved to be much more difficult and led me down several\ndifferent paths trying to get it to work.\n\n## Table of Contents\n\n## Setting `stroke` and `fill` on hover\n\nMy first thought was to treat the gradient like any other color and try to set\n`stroke` and `fill` to the gradient on hover. This did not seem to be a thing\nthat was possible, however, so I needed to keep looking.\n\n## Using `\u003ClinearGradient>` in the SVG code\n\nAfter the naive approach did not work, I did some research and found a\n[Stack Overflow Post](https://stackoverflow.com/questions/14051351/svg-gradient-using-css)\nthat recommended using `\u003ClinearGradient>` directly in the SVG code and applying\nit as the `stroke` and `fill` on hover. **Note: this example uses Tailwind\npretty heavily.**\n\n\u003CCH.Code rows={25}>\n\n```html linear-gradient-svg.html\n\u003Cbutton\n  type=\"button\"\n  class=\"group relative rounded-full focus:outline-none\"\n  aria-label=\"Fast-forward 10 seconds\"\n>\n  \u003Csvg\n    class=\"h-10 w-10\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    \u003Cpath\n      class=\"group-hover:stroke-[url(#paint0_linear_201_22852)] dark:group-hover:stroke-[url(#paint0_linear_201_20128)]\"\n      d=\"M9 10L9 15\"\n      stroke=\"#9DA3AF\"\n      stroke-width=\"1.5\"\n      stroke-linecap=\"square\"\n    />\n    \u003Cpath\n      class=\"group-hover:stroke-[url(#paint1_linear_201_22852)] dark:group-hover:stroke-[url(#paint1_linear_201_20128)]\"\n      d=\"M13.75 10H13.25C12.5596 10 12 10.5596 12 11.25V13.75C12 14.4404 12.5596 15 13.25 15H13.75C14.4404 15 15 14.4404 15 13.75V11.25C15 10.5596 14.4404 10 13.75 10Z\"\n      stroke=\"#9DA3AF\"\n      stroke-width=\"1.5\"\n    />\n    \u003Cpath\n      class=\"group-hover:fill-[url(#paint2_linear_201_22852)] dark:group-hover:fill-[url(#paint2_linear_201_20128)]\"\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M3.25 12C3.25 7.16751 7.16751 3.25 12 3.25C14.2529 3.25 16.3063 4.10071 17.8578 5.5H15.5V7H20.25V2.25H18.75V4.28624C16.9474 2.70773 14.5852 1.75 12 1.75C6.33908 1.75 1.75 6.33908 1.75 12C1.75 17.6609 6.33908 22.25 12 22.25C17.6609 22.25 22.25 17.6609 22.25 12C22.25 10.7394 22.0221 9.5305 21.6047 8.41329L20.2105 8.96769C20.5593 9.91159 20.75 10.9328 20.75 12C20.75 16.8325 16.8325 20.75 12 20.75C7.16751 20.75 3.25 16.8325 3.25 12Z\"\n      fill=\"#9DA3AF\"\n    />\n    \u003Cdefs>\n      {/* Light */}\n      \u003ClinearGradient\n        id=\"paint0_linear_201_22852\"\n        x1=\"9.5\"\n        y1=\"10\"\n        x2=\"9.5\"\n        y2=\"15\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#BBA4FF\" />\n        \u003Cstop offset=\"1\" stop-color=\"#9D7BFF\" />\n      \u003C/linearGradient>\n      \u003ClinearGradient\n        id=\"paint1_linear_201_22852\"\n        x1=\"13.5\"\n        y1=\"10\"\n        x2=\"13.5\"\n        y2=\"15\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#BBA4FF\" />\n        \u003Cstop offset=\"1\" stop-color=\"#9D7BFF\" />\n      \u003C/linearGradient>\n      \u003ClinearGradient\n        id=\"paint2_linear_201_22852\"\n        x1=\"12\"\n        y1=\"1.75\"\n        x2=\"12\"\n        y2=\"22.25\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#C0ABFF\" />\n        \u003Cstop offset=\"1\" stop-color=\"#9571FF\" />\n      \u003C/linearGradient>\n\n      {/* Dark */}\n      \u003ClinearGradient\n        id=\"paint0_linear_201_20128\"\n        x1=\"9.5\"\n        y1=\"10\"\n        x2=\"9.5\"\n        y2=\"15\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#A3E8FE\" />\n        \u003Cstop offset=\"1\" stop-color=\"#4ECDF6\" />\n      \u003C/linearGradient>\n      \u003ClinearGradient\n        id=\"paint1_linear_201_20128\"\n        x1=\"13.5\"\n        y1=\"10\"\n        x2=\"13.5\"\n        y2=\"15\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#A3E8FE\" />\n        \u003Cstop offset=\"1\" stop-color=\"#4ECDF6\" />\n      \u003C/linearGradient>\n      \u003ClinearGradient\n        id=\"paint2_linear_201_20128\"\n        x1=\"12\"\n        y1=\"1.75\"\n        x2=\"12\"\n        y2=\"22.25\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        \u003Cstop stop-color=\"#9DE6FE\" />\n        \u003Cstop offset=\"1\" stop-color=\"#4ACBF5\" />\n      \u003C/linearGradient>\n    \u003C/defs>\n  \u003C/svg>\n\u003C/button>\n```\n\n\u003C/CH.Code>\n\n### Example\n\n\u003Cdiv className=\"not-prose\">\n  \u003Cp className=\"mb-2\">Hover me:\u003C/p>\n\n  \u003Cbutton\n    type=\"button\"\n    className=\"group relative rounded-full focus:outline-none\"\n    aria-label=\"Fast-forward 10 seconds\"\n  >\n    \u003Csvg\n      className=\"h-10 w-10\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      \u003Cpath\n        className=\"group-hover:stroke-[url(#paint0_linear_201_22852)] dark:group-hover:stroke-[url(#paint0_linear_201_20128)]\"\n        d=\"M9 10L9 15\"\n        stroke=\"#9DA3AF\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"square\"\n      />\n      \u003Cpath\n        className=\"group-hover:stroke-[url(#paint1_linear_201_22852)] dark:group-hover:stroke-[url(#paint1_linear_201_20128)]\"\n        d=\"M13.75 10H13.25C12.5596 10 12 10.5596 12 11.25V13.75C12 14.4404 12.5596 15 13.25 15H13.75C14.4404 15 15 14.4404 15 13.75V11.25C15 10.5596 14.4404 10 13.75 10Z\"\n        stroke=\"#9DA3AF\"\n        strokeWidth=\"1.5\"\n      />\n      \u003Cpath\n        className=\"group-hover:fill-[url(#paint2_linear_201_22852)] dark:group-hover:fill-[url(#paint2_linear_201_20128)]\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M3.25 12C3.25 7.16751 7.16751 3.25 12 3.25C14.2529 3.25 16.3063 4.10071 17.8578 5.5H15.5V7H20.25V2.25H18.75V4.28624C16.9474 2.70773 14.5852 1.75 12 1.75C6.33908 1.75 1.75 6.33908 1.75 12C1.75 17.6609 6.33908 22.25 12 22.25C17.6609 22.25 22.25 17.6609 22.25 12C22.25 10.7394 22.0221 9.5305 21.6047 8.41329L20.2105 8.96769C20.5593 9.91159 20.75 10.9328 20.75 12C20.75 16.8325 16.8325 20.75 12 20.75C7.16751 20.75 3.25 16.8325 3.25 12Z\"\n        fill=\"#9DA3AF\"\n      />\n      \u003Cdefs>\n        {/* Light */}\n        \u003ClinearGradient\n          id=\"paint0_linear_201_22852\"\n          x1=\"9.5\"\n          y1=\"10\"\n          x2=\"9.5\"\n          y2=\"15\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#BBA4FF\" />\n          \u003Cstop offset=\"1\" stopColor=\"#9D7BFF\" />\n        \u003C/linearGradient>\n        \u003ClinearGradient\n          id=\"paint1_linear_201_22852\"\n          x1=\"13.5\"\n          y1=\"10\"\n          x2=\"13.5\"\n          y2=\"15\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#BBA4FF\" />\n          \u003Cstop offset=\"1\" stopColor=\"#9D7BFF\" />\n        \u003C/linearGradient>\n        \u003ClinearGradient\n          id=\"paint2_linear_201_22852\"\n          x1=\"12\"\n          y1=\"1.75\"\n          x2=\"12\"\n          y2=\"22.25\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#C0ABFF\" />\n          \u003Cstop offset=\"1\" stopColor=\"#9571FF\" />\n        \u003C/linearGradient>\n\n        {/* Dark */}\n        \u003ClinearGradient\n          id=\"paint0_linear_201_20128\"\n          x1=\"9.5\"\n          y1=\"10\"\n          x2=\"9.5\"\n          y2=\"15\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#A3E8FE\" />\n          \u003Cstop offset=\"1\" stopColor=\"#4ECDF6\" />\n        \u003C/linearGradient>\n        \u003ClinearGradient\n          id=\"paint1_linear_201_20128\"\n          x1=\"13.5\"\n          y1=\"10\"\n          x2=\"13.5\"\n          y2=\"15\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#A3E8FE\" />\n          \u003Cstop offset=\"1\" stopColor=\"#4ECDF6\" />\n        \u003C/linearGradient>\n        \u003ClinearGradient\n          id=\"paint2_linear_201_20128\"\n          x1=\"12\"\n          y1=\"1.75\"\n          x2=\"12\"\n          y2=\"22.25\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          \u003Cstop stopColor=\"#9DE6FE\" />\n          \u003Cstop offset=\"1\" stopColor=\"#4ACBF5\" />\n        \u003C/linearGradient>\n      \u003C/defs>\n    \u003C/svg>\n\n  \u003C/button>\n\u003C/div>\n\nThis ultimately did work, but it seemed to be impossible to use transitions to\nhave the colors gradually change, which led to a less than desirable jarring\ncolor swap.\n\n## Using `@property` for the gradient colors\n\nAfter almost deciding to settle and just accept that I would not be able to fade\nthe colors in and out nicely, I remembered\n[mask-image](https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image) and,\nafter some searching, stumbled upon\n[this post](https://dev.to/afif/we-can-finally-animate-css-gradient-kdk) which\ninspired the solution utilizing CSS custom properties.\n\n\u003CCH.Code rows={25}>\n\n```css gradient-icon.css\n@property --gradient-start {\n  syntax: '\u003Ccolor>';\n  inherits: false;\n  initial-value: oklch(67.65% 0.043 285.21);\n}\n\n@property --gradient-stop {\n  syntax: '\u003Ccolor>';\n  inherits: false;\n  initial-value: oklch(67.65% 0.043 285.21);\n}\n\n@media (prefers-color-scheme: dark) {\n  @property --gradient-start {\n    syntax: '\u003Ccolor>';\n    inherits: false;\n    initial-value: oklch(71.44% 0.019 264.45);\n  }\n\n  @property --gradient-stop {\n    syntax: '\u003Ccolor>';\n    inherits: false;\n    initial-value: oklch(71.44% 0.019 264.45);\n  }\n}\n\n.gradient-icon {\n  background: linear-gradient(\n    180deg,\n    var(--gradient-start) 0%,\n    var(--gradient-stop) 100%\n  );\n  transition:\n    --gradient-start 0.5s,\n    --gradient-stop 0.5s;\n}\n\n.gradient-icon:hover {\n  --gradient-start: oklch(77.32% 0.129 294.81);\n  --gradient-stop: oklch(67.59% 0.18851878808119876 292.4954219580293);\n  @media (prefers-color-scheme: dark) {\n    --gradient-start: oklch(88.52% 0.079 220.53);\n    --gradient-stop: oklch(78.86% 0.125 223.67);\n  }\n}\n```\n\n```html forward-button.html\n\u003Cbutton\n  type=\"button\"\n  class=\"gradient-icon relative h-10 w-10 rounded-full focus:outline-none\"\n  aria-label=\"Fast-forward 10 seconds\"\n  style=\"mask-image: url(/images/forward-icon.svg)\"\n>\n  \u003Cdiv class=\"absolute -inset-4 -left-2 md:hidden\" />\n\u003C/button>\n```\n\n```html forward-icon.svg\n\u003Csvg\n  width=\"40\"\n  height=\"40\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  \u003Cpath\n    d=\"M9 10L9 15\"\n    stroke=\"#000000\"\n    stroke-width=\"1.5\"\n    stroke-linecap=\"square\"\n  />\n  \u003Cpath\n    d=\"M13.75 10H13.25C12.5596 10 12 10.5596 12 11.25V13.75C12 14.4404 12.5596 15 13.25 15H13.75C14.4404 15 15 14.4404 15 13.75V11.25C15 10.5596 14.4404 10 13.75 10Z\"\n    stroke=\"#000000\"\n    stroke-width=\"1.5\"\n  />\n  \u003Cpath\n    fill-rule=\"evenodd\"\n    clip-rule=\"evenodd\"\n    d=\"M3.25 12C3.25 7.16751 7.16751 3.25 12 3.25C14.2529 3.25 16.3063 4.10071 17.8578 5.5H15.5V7H20.25V2.25H18.75V4.28624C16.9474 2.70773 14.5852 1.75 12 1.75C6.33908 1.75 1.75 6.33908 1.75 12C1.75 17.6609 6.33908 22.25 12 22.25C17.6609 22.25 22.25 17.6609 22.25 12C22.25 10.7394 22.0221 9.5305 21.6047 8.41329L20.2105 8.96769C20.5593 9.91159 20.75 10.9328 20.75 12C20.75 16.8325 16.8325 20.75 12 20.75C7.16751 20.75 3.25 16.8325 3.25 12Z\"\n    fill=\"#000000\"\n  />\n\u003C/svg>\n```\n\n\u003C/CH.Code>\n\n### Example\n\n\u003Cdiv className=\"not-prose\">\n  \u003Cp className=\"mb-2\">Hover me:\u003C/p>\n  \u003Cbutton\n    type=\"button\"\n    className=\"gradient-icon relative h-10 w-10 rounded-full focus:outline-none\"\n    aria-label=\"Fast-forward 10 seconds\"\n    style={{ maskImage: 'url(/images/forward-icon.svg)' }}\n  >\n    \u003Cdiv className=\"absolute -inset-4 -left-2 md:hidden\" />\n  \u003C/button>\n\u003C/div>\n\nWe now have a nice fading in/out transition from a solid color to a gradient.\nThis is accomplished using `@property` and setting our initial start/stop colors\nfor the gradient to a solid color, and then swapping out those variables for new\nstart/stop colors on hover.\n\n## Wrapping up\n\nI was surprised to learn there was not an easier solution built into CSS, but\nperhaps there will be one day. It seems like this is a lot of work to accomplish\nwhat feels like it should be simpler. Is there a better way to do this that I\ndidn't try? Hit me up on Twitter and let me know!\n[@RobbieTheWagner](https://twitter.com/RobbieTheWagner).","src/articles/animating-svg-gradients-with-css-custom-properties/index.mdx","bcbc2f9f59f15e0e",true,"five-html-elements-that-make-javascript-libraries-obsolete",{"id":22,"data":24,"body":28,"filePath":29,"digest":30,"deferredRender":21},{"title":25,"description":26,"date":27,"author":17},"5 HTML Elements That Make JavaScript Libraries Obsolete!","Do we even need JavaScript anymore? Of course we do, but maybe not as often as you would think!  With the slew of hot new HTML functionality, I am increasingly finding that native HTML elements  do many of the same things I used to reach for JavaScript libraries for. Come with me on this  journey and we'll explore my top...",["Date","2024-03-11T00:00:00.000Z"],"import { ArticleLayout } from '@/components/ArticleLayout';\nimport { ModalDialog } from './ModalDialog';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## Do we even need JavaScript anymore?\n\nOf course we do, but maybe not as often as you would think! With the slew of hot\nnew HTML functionality, I am increasingly finding that native HTML elements do\nmany of the same things I used to reach for JavaScript libraries for. Come with\nme on this journey and we'll explore my top 5 HTML elements that replace bloated\nJavaScript libraries.\n\n## Table of Contents\n\n## [&lt;details&gt; and &lt;summary&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)\n\nAccordions have been a popular feature of web apps for decades. They have\nhistorically been bundled with very heavy JS and CSS to animate the opening and\nclosing of the accordion and added a lot of bloat to an application's bundle\nsize. With the introduction of the `\u003Cdetails>` and `\u003Csummary>` elements,\neveryone can now have a simple accordion without the need for any additional\nJavaScript.\n\n```html accordion.html\n\u003Cdetails>\n  \u003Csummary>\n    \u003Cspan>What's the best fast food?\u003C/span>\n  \u003C/summary>\n  \u003Cstrong>Taco Bell\u003C/strong>\n\u003C/details>\n```\n\n\u003Cdetails>\n  \u003Csummary>\n    \u003Cspan>What's the best fast food?\u003C/span>\n  \u003C/summary>\n  \u003Cstrong>Taco Bell\u003C/strong>\n\u003C/details>\n\nIf you are not concerned with animating the opening/closing or changing the\ndefault styles, you are done. However, if you want things to look a little more\npolished, you can apply some small styling changes to make opening and closing\nbuttery smooth.\n\n```css smooth-accordion.css\ndetails {\n  padding-top: 16px;\n  padding-bottom: 16px;\n}\n\ndetails summary {\n  cursor: pointer;\n  margin-bottom: -16px;\n  transition-property: all;\n  transition-duration: 150ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\ndetails[open] summary {\n  margin-bottom: 16px;\n}\n```\n\n\u003Cdetails className=\"group py-4\">\n  \u003Csummary className=\"-mb-4 cursor-pointer transition-all group-open:mb-4\">\n    \u003Cspan>What's the best fast food?\u003C/span>\n  \u003C/summary>\n  \u003Cstrong>Taco Bell\u003C/strong>\n\u003C/details>\n\n## [&lt;progress&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)\n\nIn the past, you may have used libraries like\n[progress.js](https://usablica.github.io/progress.js/) to create progress bars\nfor your applications, but not anymore! Thanks to HTML's `\u003Cprogress>` element,\nthese libraries are now mostly obsolete.\n\nYou will probably want to create some kind of wrapper component for your\nprogress bars, so that you can style them and easily have the values be\nreactive, but that is not a requirement for the base case.\n\n{/* prettier-ignore */}\n```html progress.html\n\u003Cprogress value=\"750\" max=\"1000\">\n  \u003Cspan>75%\u003C/span>\n\u003C/progress>\n```\n\n\u003Cdiv className=\"flex items-center\">\n  \u003Cprogress\n    className=\"progress-unfilled:bg-[#F2F2F2] progress-filled:bg-cyan-700\"\n    value=\"750\"\n    max=\"1000\"\n  >\n    \u003Cspan>75%\u003C/span>\n  \u003C/progress>\n  \u003Cspan className=\"ml-2\">75%\u003C/span>\n\u003C/div>\n\n## [&lt;meter&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter)\n\n`\u003Cmeter>` is very similar to `\u003Cprogress>` but has a subtly different meaning. It\nshould be used when you want to display a scalar measurement within a range, for\nexample, disk usage.\n\n```html meter.html\n\u003Cdiv>\n  \u003Clabel for=\"disk_c\">Disk usage:\u003C/label>\n  \u003Cmeter id=\"disk_c\" value=\"2\" min=\"0\" max=\"10\">2 out of 10\u003C/meter>\n\u003C/div>\n```\n\n\u003Cdiv>\n  \u003Clabel htmlFor=\"disk_c\">Disk usage:\u003C/label>\n  \u003Cmeter className=\"ml-2\" id=\"disk_c\" value=\"2\" min=\"0\" max=\"10\">\n    2 out of 10\n  \u003C/meter>\n\u003C/div>\n\n## [&lt;dialog&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)\n\nModal dialogs are a very common thing in JavaScript applications. There are\ncountless libraries for rendering modals, and most of them have tons of extra\ncode you may not need. Historically, developers needed to manually apply an\noverlay to stop the user from clicking on other things, trap keyboard focus to\nthe modal to avoid tabbing out of the modal context, and various other things to\nmake the modal as usable and accessible as it could be.\n\nToday, we have the `\u003Cdialog>` element to handle all of this for us out of the\nbox. It ships with support for showing both a non-modal dialog via\n[`.show()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/show)\nand a modal dialog via\n[`.showModal()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal)\nand either of them can be programmatically closed via the\n[`.close()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close)\nmethod.\n\nUnlike some of the other elements mentioned in this post, we will need a little\nbit more JavaScript setup to work with `\u003Cdialog>` since we need to store a\nreference to the element to be able to call `.show()/.showModal()` on it. In the\ninterest of setting things up quickly, I threw together a React and Tailwind\nexample that illustrates how you could create a small `\u003CModalDialog/>`\ncomponent.\n\n```jsx ModalDialog.jsx\n// from ./ModalDialog.jsx\n```\n\n\u003CModalDialog />\n\n## &lt;input&gt;\n\nThere are a TON of\n[input types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\nbuilt into HTML these days that make collecting data from users a breeze. While\nI could list many examples, I think there are two types that really stick out to\nme as being able to replace complicated JavaScript libraries.\n\n### [&lt;input type=\"color\"&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color)\n\nThe color input type is something I discovered at work while trying to fix a bug\nin our custom color picker logic. We were using an outdated package, that had\nnot been maintained in years, and debugging it was proving very difficult.\n\nWhile looking for alternatives, I happened to take a peek at the current input\ntypes that existed, and I was overjoyed to find `type=\"color\"` as it was exactly\nwhat I needed!\n\n```html color-input.html\n\u003Cinput type=\"color\" />\n```\n\n\u003Clabel className=\"flex items-center\">\n  Pick a color\n  \u003Cinput className=\"ml-2\" type=\"color\" />\n\u003C/label>\n\n### [&lt;input type=\"date\"&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date)\n\nThe date picker has plagued web developers since the dawn of web development\nitself. We all know we will probably need one for our applications, but there\nhas never been a great one that handled all the necessary functionality, without\nbugs, worked well on mobile, and was customizable to fit the look and feel of\nour apps.\n\nEnter the native HTML input `type=\"date\"`. This thing is amazing. It handles all\nthe functionality you could ever want from a date picker, and since it is native\nwill seamlessly fall back to native controls on mobile.\n\nPretty much the only downside is, since they are browser specific, there isn't\nmuch you can do to have a consistent look and feel across browsers. I would\nargue this shouldn't be a big deal though. Users are used to input controls\nmatching the environment they are browsing in, so if they don't match your\napplication, I think that is okay. Consistently working functionality is better\nthan something that looks pretty, but is buggy any day of the week.\n\n```html date-input.html\n\u003Cinput type=\"date\" />\n```\n\n\u003Cinput type=\"date\" />\n\n## Wrapping up\n\nHopefully this has enlightened you to the power of native HTML solutions and\nwill make you think twice about reaching for a library by default. What are some\nof your favorite HTML elements? Hit me up on Twitter and let me know!\n[@RobbieTheWagner](https://twitter.com/RobbieTheWagner).","src/articles/five-html-elements-that-make-javascript-libraries-obsolete/index.mdx","50637bbff4902030","top-five-web-developer-tools",{"id":31,"data":33,"body":37,"filePath":38,"digest":39,"deferredRender":21},{"title":34,"description":35,"date":36,"author":17},"Top 5 Web Developer Tools for 2023","When was the last time you updated your web development tools? I don't know about you, but when I find tools I like to use for web development, I tend to stick with them for many, many years. This isn't necessarily a bad thing, but in the past year or two a...",["Date","2022-12-05T00:00:00.000Z"],"import Image from 'next/image';\n\nimport { ArticleLayout } from '@/components/ArticleLayout';\n\nimport arcImg from './img/arc.png';\nimport githubDesktop from './img/github-desktop.png';\nimport githubPR from './img/github-desktop-pr.png';\nimport warpAISearch from './img/warp-ai-search.jpg';\nimport warpDocs from './img/warp-docs.png';\nimport zed from './img/zed.jpg';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## When was the last time you updated your web development tools?\n\nI don't know about you, but when I find tools I like to use for web development,\nI tend to stick with them for many, many years. This isn't necessarily a bad\nthing, but in the past year or two a lot of new and interesting tools have\ndropped, and I am loving using them.\n\nI think, at this point, most of us know about VSCode, and while I do use it\ndaily, I am not going to be highlighting it in this post. So, without further\nado, let's jump into a list of my top five developer tools for working on and\nconsuming the web in 2023 and beyond.\n\n## 1. [Arc](https://thebrowser.company/)\n\n\u003Ca href=\"https://thebrowser.company/\">\n  \u003CImage\n    src={arcImg}\n    alt=\"Screenshot of Arc showing GitHub open, some tabs on the left and a favorites bar\"\n  />\n\u003C/a>\n\nIt has been a long time since I got excited about a new browser. It seems like\nmost \"new\" browsers are often a Chrome clone that has been reskinned and maybe\nhas a few extra features. Chrome is a great browser, don't get me wrong, and\nbrowsers like Brave have made Chromium even cooler, but The Browser Company has\ndramatically changed the game with their new browser: Arc.\n\nArc moves your tabs to the left side and introduces the concept of Spaces, which\nallows you to organize your tabs by category. For example, I have Spaces for\npersonal, work, and podcasting. There is also an ever-present favorites bar for\nsites you visit extremely frequently.\n\nPerhaps the best feature, of their reimagination of tabs, is you can set the\ntabs to auto close. For tab hoarders like me, this is a game changer, and keeps\nmy huge tabs collection in check.\n\nArc also has great keyboard support, with a command palette-like interface when\nyou press `CMD + T`. This maps to your existing muscle memory of opening a new\ntab, but allows you to perform multiple different actions, instead of just\nopening a tab.\n\nThere are many other features and quality-of-life improvements baked into Arc,\nso give it a try for yourself and see what you think!\n\n## 2. [Warp](https://www.warp.dev/)\n\nWarp touts itself as \"The terminal for the 21st century\", and I think that's a\npretty fair statement. It adds loads of features that most other terminal apps\ndo not offer, and it's written in Rust, making it blazing fast, so it easily\noutperforms Electron-based terminals.\n\nOne of the coolest features of Warp is its AI Search. You may have been hearing\na lot about GPT-3 and OpenAI Chat recently, and how powerful it is. Well, Warp\nuses the same amazing GPT-3 technology to power its AI search, which means\nsearching things like `delete git branch` will suggest\n`git branch -d branch_name`, so finding the command you need is a breeze.\n\n\u003Ca href=\"https://www.warp.dev/\">\n  \u003CImage\n    src={warpAISearch}\n    alt=\"Screenshot of Warp AI search showing results for deleting a git branch\"\n  />\n\u003C/a>\n\nWarp has also reimagined how your output is displayed. Instead of a huge wall of\ntext, your commands and their output are grouped into blocks. This allows you to\neasily navigate through them, and share them with your team for easier\ndebugging.\n\nTerminal sharing is coming soon, so you can share a permalink to your terminal\nwith your team, and they can view it in real-time. Soon documentation will be\nsupported inside Warp as well, so there will be no need to navigate to an\nexternal wiki or docs site, and instead, you can view the docs directly inline.\n\n\u003Ca href=\"https://www.warp.dev/\">\n  \u003CImage\n    src={warpDocs}\n    alt=\"Screenshot of Warp showing inline documentation for AWS\"\n  />\n\u003C/a>\n\nTo learn more about Warp, check out our\n[podcast episode with Warp's founder, Zach Lloyd](https://www.whiskey.fm/prioritizing-performance-and-the-future-of-the-terminal-with-zach-lloyd/).\n\n## 3. [Zed](https://zed.dev/)\n\n\u003Ca href=\"https://zed.dev/\">\n  \u003CImage\n    src={zed}\n    alt=\"Screenshot of Zed showing someone editing a markdown file and some people following along\"\n  />\n\u003C/a>\n\nI just recently got my invite from Zed, so I have not had a ton of time to play\nwith it, but the concept seems really cool, so I wanted to make sure to\nhighlight it here. Zed tries hard to remove anything you don't need, so the\nwindow appears very bare bones. This eliminates distractions and gives you more\nspace to work.\n\nThe real selling point of Zed, however, is its collaboration features. You can\ninvite any of your contacts to view your session and code alongside you, which\nis much easier and more productive than trying to screen share via Zoom. It\nallows true collaboration on the same file, at the same time.\n\n## 4. [GitHub Desktop](https://desktop.github.com/)\n\n\u003Ca href=\"https://desktop.github.com/\">\n  \u003CImage\n    src={githubDesktop}\n    alt=\"Screenshot of GitHub Desktop showing history and file changes\"\n  />\n\u003C/a>\n\nThis one flies under the radar and is very underrated, in my opinion. There are\na lot of very powerful tools for git built around power users and handling\ncomplex workflows, but if you use GitHub and you want something simple and\nintuitive to push and pull code, GitHub Desktop is a great tool.\n\nOne of my favorite things is having a button to open a new pull request from my\nbranch. It takes out the unnecessary step of needing to push, then open GitHub\nand create a PR. It seems like a small thing, but I find it incredibly useful.\n\n\u003Ca href=\"https://desktop.github.com/\">\n  \u003CImage\n    src={githubPR}\n    alt=\"Screenshot of GitHub Desktop showing the create pull request button\"\n  />\n\u003C/a>\n\n## 5. [Fig](https://fig.io/)\n\n\u003Cvideo\n  autoPlay\n  muted\n  loop\n  width=\"100%\"\n  height=\"auto\"\n  playsInline\n  preload=\"auto\"\n  style={{ borderRadius: '5px' }}\n  poster=\"\"\n>\n  \u003Csource src=\"/videos/fig-demo.mp4\" type=\"video/mp4\" />\n  Your browser doesn't support the video tag.\n\u003C/video>\n\nAnother player, new to the terminal space, is Fig. Fig adds IDE-style\nautocomplete to your existing terminal. It works with the three most popular\nshells: `bash`, `zsh`, and `fish` and has integrations with various terminal\napps and IDEs. It is very helpful when trying to remember commands or if you\nwant to save keystrokes!\n\n## Wrap-up\n\nThese, in my opinion, are the top 5 web developer tools people should be\nchecking out in 2023 and beyond. If there is a developer tool you think should\nhave been on this list, let me know on Twitter!\n([@RobbieTheWagner](https://twitter.com/RobbieTheWagner))","src/articles/top-five-web-developer-tools/index.mdx","4f418fd005a20fe3","top-five-javascript-podcasts",{"id":40,"data":42,"body":46,"filePath":47,"digest":48,"deferredRender":21},{"title":43,"description":44,"date":45,"author":17},"Top 5 JavaScript Podcasts for 2023","Which JavaScript podcasts are the hottest? Although podcasts are not a new thing, they have exploded in popularity over the last several years. Likewise, JavaScript is also not new, but has continued to grow exponentially and is used in all sorts of ways...",["Date","2022-10-15T00:00:00.000Z"],"import Image from 'next/image';\n\nimport { ArticleLayout } from '@/components/ArticleLayout';\n\nimport frontEndHHImg from './img/front-end-hh.jpg';\nimport jsPartyImg from './img/js-party.jpg';\nimport shoptalkImg from './img/shop-talk.png';\nimport syntaxImg from './img/syntax.png';\nimport wwwImg from './img/www.png';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## Which JavaScript podcasts are the hottest?\n\nAlthough podcasts are not a new thing, they have exploded in popularity over the\nlast several years. Likewise, JavaScript is also not new, but has continued to\ngrow exponentially and is used in all sorts of ways from building user\ninterfaces to writing serverless functions.\n\nIt is no surprise that there are also a growing number of podcasts centering\naround web development and JavaScript, but which ones should you listen to?\nWe'll break down the top five JavaScript podcasts to listen to, to stay up to\ndate on the latest JavaScript trends.\n\n## 1. [Syntax](https://syntax.fm/)\n\n\u003Ca href=\"https://syntax.fm/\">\n  \u003CImage src={syntaxImg} alt=\"Syntax podcast logo\" />\n\u003C/a>\n\nOne of _the_ most popular, and tastiest web development podcasts out there is\n[Syntax](https://syntax.fm/) by [Scott Tolinski](https://twitter.com/stolinski)\nand [Wes Bos](https://twitter.com/wesbos). They keep things lighthearted and fun\nwith games like Stump'd where they do random JavaScript interview questions and\ntry to stump one another.\n\nThey release three episodes a week of various formats, a short \"Hasty Treat\", a\nlonger \"Tasty Treat\", and their relatively new Supper Club where they interview\nguests from the developer community.\n\n## 2. [ShopTalk Show](https://shoptalkshow.com/)\n\n\u003Ca href=\"https://shoptalkshow.com/\">\n  \u003CImage src={shoptalkImg} alt=\"ShopTalk Show podcast logo\" />\n\u003C/a>\n\nIf you have been around the web development scene for a while, you have probably\nheard of [CSS-Tricks](https://css-tricks.com/) and/or\n[CodePen](https://codepen.io/), and if you have, you are likely also familiar\nwith their founder, [Chris Coyier](https://twitter.com/chriscoyier). He and\n[Dave Rupert](https://twitter.com/davatron5000) release episodes of\n[ShopTalk](https://shoptalkshow.com/) weekly for the Shopamaniacs and cover a\nwide range of topics from JavaScript and CSS to parenting and hot topics of the\nday.\n\n## 3. [JS Party](https://changelog.com/jsparty)\n\n\u003Ca href=\"https://changelog.com/jsparty\">\n  \u003CImage src={jsPartyImg} alt=\"JS Party podcast logo\" />\n\u003C/a>\n\n[JS Party](https://changelog.com/jsparty) has had many hosts over the years and\ncountless guests all doing deep dives into various web development topics. From\nnew browser features coming out, to fancy ways to do page layouts with one line\nof CSS, to the latest JavaScript frameworks, they get deep into the technical\ndetails of their topics to help keep you up to date.\n\n## 4. [Whiskey Web and Whatnot](https://whiskeywebandwhatnot.fm/)\n\n\u003Ca href=\"https://whiskeywebandwhatnot.fm/\">\n  \u003CImage src={wwwImg} alt=\"Whiskey Web and Whatnot podcast logo\" />\n\u003C/a>\n\nWe may be a bit biased here, but we think our podcast\n[Whiskey Web and Whatnot](https://whiskeywebandwhatnot.fm/) has a great format\nas both an informative JavaScript podcast and an entertaining fireside chat with\nsome of your favorite devs, like the aforementioned Wes Bos and Chris Coyier, as\nwell as other prominent developers like Charlie Gerard, Kelly Vaughn, and Kent\nC. Dodds.\n\nIf you're looking for something a little less technical, find an episode that\nsounds interesting, grab a glass, and have a drink with us.\n\n## 5. [Front End Happy Hour](https://www.frontendhappyhour.com/)\n\n\u003Ca href=\"https://www.frontendhappyhour.com/\">\n  \u003CImage src={frontEndHHImg} alt=\"Front End Happy Hour podcast logo\" />\n\u003C/a>\n\n[Front End Happy Hour](https://www.frontendhappyhour.com/) is another somewhat\nless formal option featuring a panel of Software Engineers from Netflix, Twitch,\nand Atlassian talking over drinks about Frontend, JavaScript, and career\ndevelopment.\n\nThey have lots of guests from the Netflix engineering team, so it gives you a\npeek into how one of the hottest tech companies is approaching their web apps.\nThey also talk about things such as job hunting, interview prep, and dealing\nwith burnout.\n\n## Wrap-up\n\nI think these are the top 5 JavaScript podcasts currently, but new podcasts are\nreleased all the time and this is not an exhaustive list. If I missed one of\nyour favorites, let me know on Twitter!\n([@RobbieTheWagner](https://twitter.com/RobbieTheWagner))","src/articles/top-five-javascript-podcasts/index.mdx","eae30716ad961c0b","unlocking-a11y-with-semantic-html",{"id":49,"data":51,"body":55,"filePath":56,"digest":57,"deferredRender":21},{"title":52,"description":53,"date":54,"author":17},"Unlocking Web Accessibility: The Crucial Role of Semantic HTML in Inclusive Design","Is learning HTML actually important? Y 👏 E 👏 S 👏! Too many people jump right into learning React these days without understanding the fundamentals of HTML, CSS, and JavaScript. It can be tempting to skip the \"easy\" stuff and just learn it on the job...",["Date","2024-03-28T00:00:00.000Z"],"import { ArticleLayout } from '@/components/ArticleLayout';\nimport { BadReactInputFocus } from './BadReactInputFocus';\nimport { BadTextSemantics } from './BadTextSemantics';\nimport { GoodTextSemantics } from './GoodTextSemantics';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## Is learning HTML actually important?\n\nY 👏 E 👏 S 👏! Too many people jump right into learning React these days\nwithout understanding the fundamentals of HTML, CSS, and JavaScript. It can be\ntempting to skip the \"easy\" stuff and just learn it on the job, but you are\nsetting yourself up for failure. Using HTML incorrectly can lead to severe\naccessibility issues and poor user experience. Let's explore some examples and\nlearn how to craft better semantic HTML.\n\n## UI Controls\n\nUI controls are the parts of your application the user actually interacts with.\nThink inputs, buttons, forms etc. These are arguably the most important things\nto use semantic HTML for, as you want users of all abilities to be able to\nperform actions and interact with your website. Unfortunately, developers do not\nalways use semantic HTML for UI controls, and can end up falling into bad\npatterns that can make their sites unusable to some users.\n\n### Can you tell the difference between these two input/label implementations?\n\n\u003Cdiv className=\"not-prose mb-4 py-4 grid grid-cols-1 gap-4 lg:grid-cols-2\">\n  \u003Cdiv>\n    \u003CBadReactInputFocus />\n  \u003C/div>\n\n  \u003Cdiv>\n    \u003Clabel>\n      \u003Cspan className=\"mb-2 block\">My Cool Input Label\u003C/span>\n      \u003Cinput className=\"border p-2\" placeholder=\"My cool input text\" type=\"text\"/>\n    \u003C/label>\n  \u003C/div>\n\u003C/div>\n\nIt may not be obvious to the naked eye, but if you inspect the elements and poke\naround at the code, you can see they are very different. One of them uses a\n`div` with an `onClick` to focus the input, (which is something I actually saw\nin a real code base!) while the other uses semantic HTML to wrap the input in a\n`label`.\n\n\u003CCH.Code>\n```jsx BadReactInputFocus.jsx\n// from ./BadReactInputFocus.jsx\n```\n\n```html accessible-html-input.html\n\u003Clabel>\n  \u003Cspan class=\"mb-2 block\">My Cool Input Label\u003C/span>\n  \u003Cinput class=\"p-2\" placeholder=\"My cool input text\" type=\"text\" />\n\u003C/label>\n```\n\n\u003C/CH.Code>\n\nClearly, the good example using a `label` is better for many reasons. It does\nnot require shipping extra JavaScript to focus the input on click, it tells\nscreen readers what the input is, and it conveys meaning to search engines. This\nis exactly what labels were meant for, and every `input` should have a\ncorresponding `label`.\n\n### What about these buttons? Are they the same?\n\n\u003Cdiv className=\"not-prose mb-4 py-4 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n  \u003Cdiv\n    data-message=\"Yay, you clicked the button!\"\n    className=\"inline-block text-center rounded bg-gray-200 p-2 text-sm text-black transition-colors hover:bg-gray-300\"\n    onClick={(e) => {\n      alert(e.currentTarget?.getAttribute('data-message'));\n    }}\n    tabIndex=\"0\"\n    role=\"button\"\n  >\n    Click me!\n  \u003C/div>\n\n  \u003Cbutton\n    data-message=\"Yay, you clicked the button!\"\n    className=\"inline-block rounded text-center bg-gray-200 p-2 text-sm text-black transition-colors hover:bg-gray-300\"\n    onClick={(e) => {\n      alert(e.currentTarget?.getAttribute('data-message'));\n    }}\n  >\n    Click me!\n  \u003C/button>\n\u003C/div>\n\nYou may have already guessed this, but these are definitely not the same. One of\nthem uses a `\u003Cdiv>` to create a fake button and the other uses a semantic\n`\u003Cbutton>` element.\n\n\u003CCH.Code>\n```html fake-buttons.html\n\u003Cdiv\n  data-message=\"Yay, you clicked the button!\"\n  class=\"rounded bg-gray-200 p-2 text-sm text-black transition-colors hover:bg-gray-300\"\n  onclick=\"(function(element) { alert(element.getAttribute('data-message')); })(this)\"\n  tabindex=\"0\"\n  role=\"button\"\n>\n  Click me!\n\u003C/div>\n```\n\n```html semantic-buttons.html\n\u003Cbutton\n  data-message=\"Yay, you clicked the button!\"\n  class=\"rounded bg-gray-200 p-2 text-sm text-black transition-colors hover:bg-gray-300\"\n  onclick=\"(function(element) { alert(element.getAttribute('data-message')); })(this)\"\n>\n  Click me!\n\u003C/button>\n```\n\n\u003C/CH.Code>\n\nWhenever possible, you should always use a `button` for things the user can\nclick on to perform actions and if that action is transitioning to another page,\nit should instead be an anchor tag. As a general rule, it's better to use real\nelements instead of faking their type with `role` as well.\n\n## Text Content\n\nText content may not seem as important as UI controls, after all, won't people\njust be reading it the way you style it? Well, not necessarily. For people using\nscreen readers, bad semantics can lead to a very confusing experience. Not only\nthat, but your SEO will suffer if you are not using things like headings to call\nout what is important on your page.\n\n### Which of these examples is using correct semantic markup?\n\n\u003Cdiv class=\"not-prose grid gap-4 lg:grid-cols-2\">\n  \u003Cdiv>\n    \u003Ch4 className=\"font-bold mb-2\">Example 1:\u003C/h4>\n    \u003CBadTextSemantics />\n   \n  \u003C/div>\n\n  \u003Cdiv>\n    \u003Ch4 className=\"font-bold mb-2\">Example 2:\u003C/h4>\n    \u003CGoodTextSemantics />\n  \u003C/div>\n\u003C/div>\n\n\u003CCH.Code>\n```jsx BadTextSemantics.jsx\n// from ./BadTextSemantics.jsx\n```\n\n```jsx GoodTextSemantics.jsx\n// from ./GoodTextSemantics.jsx\n```\n\n\u003C/CH.Code>\n\nBoth of these achieve essentially identical results to the naked eye, and\nsomeone who does not know about headings and paragraphs may be tempted to use\nthis non-semantic approach to achieve the look they were going for. This is why\nit is important to always educate yourself on which semantic HTML elements exist\nand their use cases, to ensure you are producing the most accessible\napplications.\n\n## Wrapping up\n\nThis only scratches the surface of the true impact semantic HTML makes on the\nusability of your site for your users. As the web evolves, we are only going to\nhave more and more ways to interact with it, so thoughtfully using semantic HTML\nis going to be the best way to ensure you are providing the best experience for\n_all_ users on _all_ devices.\n\nAnything major I missed covering or just want to reach out and geek out about\nHTML? Hit me up on Twitter!\n[@RobbieTheWagner](https://twitter.com/RobbieTheWagner).\n\n### Sources\n\nMajor shout out to MDN for their great article\n[HTML: A good basis for accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML).\nA lot of the examples here were heavily influenced by it, so definitely check it\nout if you want to learn more great tips and tricks for using semantic HTML\neffectively!","src/articles/unlocking-a11y-with-semantic-html/index.mdx","f8ac527eac0f2286","top-five-web-developer-tools-2025",{"id":58,"data":60,"body":64,"filePath":65,"digest":66,"deferredRender":21},{"title":61,"description":62,"date":63,"author":17},"Top 5 Web Developer Tools for 2025","What are the best tools for web developers in 2025? I did a post on this a couple years ago laying out my top developer tools for 2023, and I wanted to circle back and give a couple updates. Honestly, not a lot has changed since then, but enough has that I...",["Date","2024-12-09T00:00:00.000Z"],"import Image from 'next/image';\n\nimport { ArticleLayout } from '@/components/ArticleLayout';\n\nimport arcCommandPalette from './img/arc-command-palette.png';\nimport arcImg from './img/arc.png';\nimport githubDesktop from './img/github-desktop.png';\nimport githubPR from './img/github-desktop-pr.png';\nimport kaleidoscope from './img/kaleidoscope.jpg';\nimport vscode from './img/vscode.png';\nimport warpAI from './img/warp-ai.webp';\nimport warpBlocks from './img/warp-blocks.webp';\nimport warpDriveNotebook from './img/warp-drive-notebook.webp';\n\nexport const meta = frontmatter;\n\nexport default (props) => \u003CArticleLayout meta={meta} {...props} />;\n\n## What are the best tools for web developers in 2025?\n\nI did a post on this a couple years ago laying out my\n[top developer tools for 2023](https://robbiethewagner.dev/articles/top-five-web-developer-tools),\nand I wanted to circle back and give a couple updates. Honestly, not a lot has\nchanged since then, but enough has that I thought it warranted posting about.\n\nLet's jump right into it, here are my top devloper tools for 2025:\n\n## 1. [Warp](https://www.warp.dev/)\n\nWarp used to tout itself as \"The terminal for the 21st century\", but they have\nblown right past that and are now shipping 22nd century level features. Warp has\nquickly become my number one tool I could not develop without.\n\nStarting with the basic features, which are already game changing, Warp has\nreimagined how your output is displayed. Instead of a huge wall of text, your\ncommands and their output are grouped into blocks. This allows you to easily\nnavigate through them, and share them with your team for easier debugging. Warp\nalso has great autocomplete and remembers commands you have run previously.\n\n\u003Ca href=\"https://www.warp.dev/warp-ai\">\n  \u003CImage\n    src={warpBlocks}\n    alt=\"Screenshot of Warp showing a command that was run and its output colocated in one block.\"\n  />\n\u003C/a>\n\nMoving on to the even more impressive features, Warp has squeezed every last\nounce of goodness out of its AI integrations. You can use natural language to\nsearch for commands and ask Warp's AI how to use them. Never again will you ask\n\"what was that command again?\".\n\n\u003Ca href=\"https://www.warp.dev/warp-ai\">\n  \u003CImage\n    src={warpAI}\n    alt=\"Screenshot of Warp AI explaining how to use grep to do regex based searches.\"\n  />\n\u003C/a>\n\nWhere Warp really shines is when you collaborate with your team. How many times\nhave your onboarding docs been outdated or spread across a bunch of different\nfiles with outdated setup steps that usually don't work? Warp Drive has\nnotebooks that allow you to combine code blocks and documentation in one place\nthat lives next to your command line and syncs in real-time.\n\n\u003Ca href=\"https://www.warp.dev/warp-drive\">\n  \u003CImage\n    src={warpDriveNotebook}\n    alt=\"Screenshot of a Warp Drive notebook showing documentation and a list of commands.\"\n  />\n\u003C/a>\n\nIf you are looking for the best terminal to use today, look no further. Warp is\nthe gold standard and is just getting better and better.\n\n_Curious about Warp's origin story? Check out our\n[podcast episode with Warp's founder, Zach Lloyd](https://www.whiskey.fm/prioritizing-performance-and-the-future-of-the-terminal-with-zach-lloyd/)._\n\n## 2. [VSCode Insiders](https://code.visualstudio.com/insiders/)\n\n\u003Ca href=\"https://code.visualstudio.com/insiders/\">\n  \u003CImage\n    src={vscode}\n    alt=\"Screenshot of VSCode Insiders editing this very blog post!\"\n  />\n\u003C/a>\n\nThese days it is almost required to use VSCode or something based on VSCode if\nyou want to be a web developer. There are just too many VSCode plugins you would\nlose access to that would put you at a significant disadvantage if you used\nsomething else. This was the case for me and when the Ember community, and all\nof the Ember specific plugins moved to VSCode, I did as well.\n\nAwhile back I decided to make the jump to VSCode Insiders. For the most part,\nthey are not that different, but the insiders version has a new version daily\nand allows you to try all the cool new things that haven't quite made it to\nVSCode stable yet.\n\nIf you do not have restrictions on what AI tools you can use, you may also want\nto check out [Cursor](https://www.cursor.com/) which is based on VSCode and adds\na lot of AI goodness on top of it.\n\n## 3. [Arc](https://thebrowser.company/)\n\n\u003Ca href=\"https://thebrowser.company/\">\n  \u003CImage\n    src={arcImg}\n    alt=\"Screenshot of Arc showing GitHub open, some tabs on the left and a favorites bar\"\n  />\n\u003C/a>\n\nArc is a really cool browser that has really changed the game and pushed the\nboundaries of what a browser can do. In a sea of identical Chromium clones, Arc\nreally rose above the rest with their thoughtful and innovative feature set.\n\nI still think one of the best features of Arc is their reimagination of tabs.\nMoving the tabs to the left side, introducing spaces to organize them, and\ndefaulting to auto closing them is a game changer for tab hoarders like me.\n\nArc also has great keyboard support, with a command palette-like interface when\nyou press `CMD + T`. This maps to your existing muscle memory of opening a new\ntab, but allows you to perform multiple different actions, instead of just\nopening a tab.\n\n\u003Ca href=\"https://thebrowser.company/\">\n  \u003CImage\n    src={arcCommandPalette}\n    alt=\"Screenshot of Arc showing the command palette.\"\n  />\n\u003C/a>\n\nSince my original post, Arc has added a ton of stuff, unsurprisingly leveraging\nAI to the max. You can now use Perplexity as your search engine, see summaries\nof pages before navigating to them, and get a beefed up `CMD + F` command to ask\nquestions in addition to finding text.\n\nThere are many other features and quality-of-life improvements baked into Arc,\nso give it a try for yourself and see what you think!\n\n## 4. [GitHub Desktop](https://desktop.github.com/)\n\n\u003Ca href=\"https://desktop.github.com/\">\n  \u003CImage\n    src={githubDesktop}\n    alt=\"Screenshot of GitHub Desktop showing history and file changes\"\n  />\n\u003C/a>\n\nGitHub Desktop continues to be my go-to tool for quickly pushing code, opening\npull requests, and interacting with GitHub repos in general. It is certainly not\nthe flashiest or the most feature rich of the git GUIs that exist, but it is the\nmost straightforward to use and gets out of your way so you can just ship code.\n\nOne of my favorite things is having a button to open a new pull request from my\nbranch. It takes out the unnecessary step of needing to push, then open GitHub\nand create a PR. It seems like a small thing, but I find it incredibly useful.\n\n\u003Ca href=\"https://desktop.github.com/\">\n  \u003CImage\n    src={githubPR}\n    alt=\"Screenshot of GitHub Desktop showing the create pull request button\"\n  />\n\u003C/a>\n\nIf you don't find joy in super complex GUIs or learning the ins and outs of all\nthe manual git CLI commands, you should really give GitHub Desktop a shot. Trust\nme, you'll like it.\n\n## 5. [Kaleidoscope](https://kaleidoscope.app/)\n\n\u003Ca href=\"https://kaleidoscope.app/\">\n  \u003CImage\n    src={kaleidoscope}\n    alt=\"Screenshot of Kaleidoscope showing a diff of two versions of a file and combining them into one merged file.\"\n  />\n\u003C/a>\n\nI don't always use a diff tool, but when I do, I use Kaleidoscope. I have found\nmost other diff and merge tools to be too complex and require a deep\nunderstanding of how git works just to use them. This has trolled me many times\nand I have lost work I meant to keep.\n\nKaleidoscope keeps it simple, and has a beautiful user interface that makes\nresolving conflicts a breeze. It allows you to view what changed over a time\nperiod, compare branches, and comb through the entire history of your files.\n\nI have not even begun to scratch the surface of all the features Kaleidoscope\nhas, but I still think it is worth it just for the basic diff and merge\nfunctionality. Give it a try, you will not be disappointed!\n\n## Wrap-up\n\nIn my opinion, these are the top 5 web developer tools you should be checking\nout in 2025 to streamline your workflow. Did your favorite developer tool make\nthe list? If there is something cool you think I missed, let me know on Twitter\n([@RobbieTheWagner](https://twitter.com/RobbieTheWagner)) or Bluesky\n([@robbiethewagner.dev](https://bsky.app/profile/robbiethewagner.dev))!","src/articles/top-five-web-developer-tools-2025/index.mdx","ed41e9fd294b78f3"]